package com.yash.tasktracker.controller;

import com.yash.tasktracker.dao.TaskDAO;
import com.yash.tasktracker.daoimpl.TaskDAOImpl;
import com.yash.tasktracker.model.Task;
import com.yash.tasktracker.model.TaskPriority;
import com.yash.tasktracker.model.TaskStatus;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

@WebServlet("/updatePersonalTask")
public class UpdatePersonalTaskServlet extends HttpServlet {

    private TaskDAO taskDAO = new TaskDAOImpl();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        int taskId = Integer.parseInt(request.getParameter("id"));
        Task task = taskDAO.read(taskId);

        if (task == null) {
            response.sendRedirect("dashboard?error=TaskNotFound");
            return;
        }

        request.setAttribute("task", task);
        request.getRequestDispatcher("EditPersonalTask.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            int id = Integer.parseInt(request.getParameter("id"));
            String title = request.getParameter("title");
            String description = request.getParameter("description");
            String priorityStr = request.getParameter("priority");
            String statusStr = request.getParameter("status");
            String dueDateStr = request.getParameter("dueDate");

            Task task = taskDAO.read(id);
            if (task == null) {
                response.sendRedirect("dashboard?error=TaskNotFound");
                return;
            }

            task.setTitle(title);
            task.setDescription(description);
            task.setPriority(TaskPriority.valueOf(priorityStr.toUpperCase()));
            task.setStatus(TaskStatus.valueOf(statusStr.toUpperCase()));

            if (dueDateStr != null && !dueDateStr.isEmpty()) {
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm");
                task.setDeadline(sdf.parse(dueDateStr));
            } else {
                task.setDeadline(null);
            }

            taskDAO.update(task);
            response.sendRedirect("dashboard?success=TaskUpdated");

        } catch (ParseException | NumberFormatException e) {
            e.printStackTrace();
            response.sendRedirect("dashboard?error=InvalidData");
        }
    }
}
