@WebServlet("/createPersonalTask")
public class CreatePersonalTaskServlet extends HttpServlet {

    private TaskDAO taskDAO = new TaskDAOImpl();

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        HttpSession session = request.getSession();
        User user = (User) session.getAttribute("user");

        if (user == null) {
            response.sendRedirect("login.jsp");
            return;
        }

        try {
            String title = request.getParameter("title");
            String description = request.getParameter("description");
            String priorityStr = request.getParameter("priority");
            String dueDateStr = request.getParameter("dueDate");

            Task task = new Task();
            task.setTitle(title);
            task.setDescription(description);
            task.setPriority(TaskPriority.valueOf(priorityStr.toUpperCase()));
            task.setStatus(TaskStatus.ASSIGNED);
            task.setCreatedAt(new Date());
            task.setCreatedBy(user.getFirstName());

            if (dueDateStr != null && !dueDateStr.isEmpty()) {
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm");
                task.setDeadline(sdf.parse(dueDateStr));
            }

            taskDAO.create(task);

            // ✅ Fetch updated tasks for this user
            List<Task> personalTasks = taskDAO.getTasksByUser(user.getId()); // implement this method in DAO

            // ✅ Put into request scope
            request.setAttribute("personalTasks", personalTasks);

            // ✅ Forward back to dashboard.jsp
            request.getRequestDispatcher("dashboard.jsp").forward(request, response);

        } catch (ParseException e) {
            e.printStackTrace();
            response.sendRedirect("dashboard.jsp?error=InvalidDate");
        }
    }
}



@Override
public List<Task> getTasksByUser(int userId) {
    List<Task> tasks = new ArrayList<>();
    String sql = "SELECT * FROM tasks WHERE created_by_user_id = ?";

    try (Connection conn = getConnection();
         PreparedStatement ps = conn.prepareStatement(sql)) {

        ps.setInt(1, userId);
        ResultSet rs = ps.executeQuery();

        while (rs.next()) {
            Task task = new Task();
            task.setId(rs.getInt("id"));
            task.setTitle(rs.getString("title"));
            task.setDescription(rs.getString("description"));
            task.setPriority(TaskPriority.valueOf(rs.getString("priority")));
            task.setStatus(TaskStatus.valueOf(rs.getString("status")));
            task.setCreatedAt(rs.getTimestamp("created_at"));
            task.setDeadline(rs.getTimestamp("deadline"));
            tasks.add(task);
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return tasks;
}
